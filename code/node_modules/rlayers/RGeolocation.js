"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Geolocation_1 = __importDefault(require("ol/Geolocation"));
var REvent_1 = require("./REvent");
/**
 * A wrapper around the OpenLayers Geolocation helper
 *
 * Must have an `RMap` parent
 */
var RGeolocation = /** @class */ (function (_super) {
    __extends(RGeolocation, _super);
    function RGeolocation(props, context) {
        var _this = this;
        var _a, _b;
        _this = _super.call(this, props, context) || this;
        if (!((_a = _this === null || _this === void 0 ? void 0 : _this.context) === null || _a === void 0 ? void 0 : _a.map))
            throw new Error('A Geolocation must be part of a map');
        var projection = (_b = props.projection) !== null && _b !== void 0 ? _b : _this.context.map.getView().getProjection();
        _this.ol = new Geolocation_1.default(__assign(__assign({}, props), { projection: projection }));
        return _this;
    }
    return RGeolocation;
}(REvent_1.RlayersBase));
exports.default = RGeolocation;
//# sourceMappingURL=RGeolocation.js.map