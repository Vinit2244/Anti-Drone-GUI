import { ROverlayBase } from './ROverlay';
/**
 * Popup component
 *
 * `Popup` extends `Overlay` and implements an automatic popup
 *
 * Requires a location context
 *
 * (ie it must be descendant of a `RFeature`)
 */
export default class RPopup extends ROverlayBase {
    constructor(props, context) {
        super(props, context);
        /**
         * Toggle the state
         */
        this.toggle = () => {
            this.visible = !this.visible;
            this.setPosition();
        };
        /**
         * Show the popup
         */
        this.show = () => {
            var _a, _b;
            if (this.showing)
                return;
            if (this.hiding)
                window.clearTimeout(this.hiding);
            this.showing = window.setTimeout(() => {
                this.visible = true;
                this.setPosition();
                this.hiding = this.showing = undefined;
            }, (_b = (_a = this.props.delay) === null || _a === void 0 ? void 0 : _a.show) !== null && _b !== void 0 ? _b : 250);
        };
        /**
         * Hide the popup
         */
        this.hide = () => {
            var _a, _b;
            if (this.hiding)
                return;
            if (this.showing)
                window.clearTimeout(this.showing);
            this.hiding = window.setTimeout(() => {
                this.visible = false;
                this.setPosition();
                this.hiding = this.showing = undefined;
            }, (_b = (_a = this.props.delay) === null || _a === void 0 ? void 0 : _a.hide) !== null && _b !== void 0 ? _b : 50);
        };
        this.visible = false;
    }
    componentWillUnmount() {
        super.componentWillUnmount();
        this.unregister();
    }
    setPosition() {
        this.ol.setPosition(this.visible ? this.context.location : undefined);
    }
    unregister() {
        this.context.feature.un('click', this.toggle);
        this.context.feature.un('pointerenter', this.show);
        this.context.feature.un('pointerleave', this.hide);
    }
    refresh() {
        this.ol.setElement(this.containerRef.current);
        this.unregister();
        switch (this.props.trigger) {
            default:
            case 'click':
                this.context.feature.on('click', this.toggle);
                break;
            case 'hover':
                this.context.feature.on('pointerenter', this.show);
                this.context.feature.on('pointerleave', this.hide);
                break;
        }
        this.setPosition();
    }
}
//# sourceMappingURL=RPopup.js.map