import React from 'react';
import { RContext } from '../context';
import { default as RLayer } from './RLayer';
import { default as RFeature } from '../RFeature';
import { default as RStyle } from '../style/RStyle';
/**
 * An abstract class used for grouping code common to all Vector layers
 *
 * Meant to be extended
 */
class RLayerBaseVector extends RLayer {
    constructor(props, context) {
        super(props, context);
        this.newFeature = (e) => {
            if (e.feature)
                this.attachFeatureHandlers([e.feature]);
            if (e.features)
                this.attachFeatureHandlers(e.features);
        };
        this.eventRelay = (e) => {
            if (this.props['on' + RLayerBaseVector.relayedEvents[e.type]])
                return (this.props['on' + RLayerBaseVector.relayedEvents[e.type]].call(this, e) !== false);
            return true;
        };
        RFeature.initEventRelay(this.context.map);
        this.eventSources = this.createSource(props);
        this.source.on('featuresloadend', this.newFeature);
        this.source.on('addfeature', this.newFeature);
        this.attachEventHandlers();
    }
    createSource(props) {
        throw new Error('RLayerBaseVector is an abstract class');
    }
    attachFeatureHandlers(features, prevProps) {
        for (const ev of Object.values(RLayerBaseVector.relayedEvents))
            if (this.props['on' + ev] !== (prevProps && prevProps['on' + ev]))
                for (const f of features)
                    f.on(ev.toLowerCase(), this.eventRelay);
    }
    componentWillUnmount() {
        super.componentWillUnmount();
        for (const ev of Object.values(RLayerBaseVector.relayedEvents))
            this.source.forEachFeature((f) => {
                f.un(ev.toLowerCase(), this.eventRelay);
                return false;
            });
    }
    refresh(prevProps) {
        super.refresh(prevProps);
        this.attachFeatureHandlers(this.source.getFeatures(), prevProps);
        if ((prevProps === null || prevProps === void 0 ? void 0 : prevProps.style) !== this.props.style)
            this.ol.setStyle(RStyle.getStyle(this.props.style));
    }
    render() {
        return (React.createElement("div", { className: '_rlayers_RLayerVector' },
            React.createElement(RContext.Provider, { value: Object.assign(Object.assign({}, this.context), { layer: this.ol, source: this.source, vectorlayer: this.ol, vectorsource: this.source }) }, this.props.children)));
    }
}
RLayerBaseVector.relayedEvents = {
    click: 'Click',
    pointermove: 'PointerMove',
    pointerenter: 'PointerEnter',
    pointerleave: 'PointerLeave'
};
export default RLayerBaseVector;
//# sourceMappingURL=RLayerBaseVector.js.map