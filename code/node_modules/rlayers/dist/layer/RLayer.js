import React from 'react';
import { RContext } from '../context';
import { RlayersBase } from '../REvent';
/**
 * Abstract base class for all layers, not meant to be used directly
 */
export default class RLayer extends RlayersBase {
    constructor(props, context) {
        var _a, _b;
        super(props, context);
        if (!((_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.map) === null || _b === void 0 ? void 0 : _b.addLayer))
            throw new Error('A layer must be part of a map');
    }
    refresh(prevProps) {
        super.refresh(prevProps);
        for (const p of [
            'visible',
            'opacity',
            'zIndex',
            'minResolution',
            'maxResolution',
            'minZoom',
            'maxZoom'
        ]) {
            const m = p.charAt(0).toUpperCase() + p.substring(1);
            if (this.props[p] !== (prevProps && prevProps[p]))
                this.ol['set' + m](this.props[p]);
        }
        if (this.source && this.props.attributions)
            this.source.setAttributions(this.props.attributions);
        if (this.props.properties)
            this.ol.setProperties(this.props.properties);
    }
    componentDidMount() {
        super.componentDidMount();
        this.context.map.addLayer(this.ol);
    }
    componentWillUnmount() {
        super.componentWillUnmount();
        this.context.map.removeLayer(this.ol);
    }
    render() {
        return (React.createElement("div", { className: '_rlayers_RLayer' },
            React.createElement(RContext.Provider, { value: Object.assign(Object.assign({}, this.context), { layer: this.ol, source: this.source }) }, this.props.children)));
    }
}
//# sourceMappingURL=RLayer.js.map