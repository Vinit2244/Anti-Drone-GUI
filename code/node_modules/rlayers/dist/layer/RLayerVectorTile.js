import React from 'react';
import { VectorTile as LayerVectorTile } from 'ol/layer';
import { VectorTile as SourceVectorTile } from 'ol/source';
import { RContext } from '../context';
import { default as RLayer } from './RLayer';
import { default as RFeature } from '../RFeature';
import RStyle from '../style/RStyle';
/**
 * A vector tile layer
 *
 * Supports loading of features from vector tile servers
 *
 * Only the handlers can be dynamically modified
 *
 * Requires an `RMap` context
 *
 * It does not provide a vector layer context for JSX-declared `RFeature`s
 * and it is not compatible with RLayerVector
 */
export default class RLayerVectorTile extends RLayer {
    constructor(props, context) {
        super(props, context);
        this.source = new SourceVectorTile({
            url: this.props.url,
            format: this.props.format,
            projection: this.props.projection
        });
        this.ol = new LayerVectorTile({
            style: RStyle.getStyle(this.props.style),
            source: this.source,
            renderBuffer: this.props.renderBuffer
        });
        this.eventSources = [this.ol, this.source];
        RFeature.initEventRelay(this.context.map);
    }
    refresh(prevProps) {
        super.refresh(prevProps);
        const handlers = Object.keys(this.props)
            .filter((ev) => ev.startsWith('on'))
            .reduce((ac, x) => (Object.assign(Object.assign({}, ac), { ['_' + x.toLowerCase()]: this.props[x] })), {});
        this.ol.setProperties(handlers);
        if ((prevProps === null || prevProps === void 0 ? void 0 : prevProps.style) !== this.props.style)
            this.ol.setStyle(RStyle.getStyle(this.props.style));
        if ((prevProps === null || prevProps === void 0 ? void 0 : prevProps.url) !== this.props.url) {
            this.source.setUrl(this.props.url);
            this.source.refresh();
        }
    }
    render() {
        return (React.createElement("div", { className: '_rlayers_RLayerVectorTile' },
            React.createElement(RContext.Provider, { value: Object.assign(Object.assign({}, this.context), { layer: this.ol, vectortilelayer: this.ol }) }, this.props.children)));
    }
}
//# sourceMappingURL=RLayerVectorTile.js.map