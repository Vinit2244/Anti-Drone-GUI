"use strict";(self.webpackChunkrlayers=self.webpackChunkrlayers||[]).push([[7638],{7638:(e,o,n)=>{n.r(o),n.d(o,{default:()=>t});const t="import React from 'react';\nimport {fromLonLat} from 'ol/proj';\nimport {Geometry, Point} from 'ol/geom';\nimport {Geolocation as OLGeoLoc} from 'ol';\nimport 'ol/ol.css';\n\nimport {RMap, ROSM, RLayerVector, RFeature, RGeolocation, RStyle} from 'rlayers';\nimport locationIcon from './svg/location.svg';\n\nexport default function Geolocation(): JSX.Element {\n    const [pos, setPos] = React.useState(new Point(fromLonLat([0, 0])));\n    const [accuracy, setAccuracy] = React.useState(undefined as Geometry | undefined);\n    return (\n        <RMap className='example-map' initial={{center: fromLonLat([0, 0]), zoom: 4}}>\n            <ROSM />\n            <RGeolocation\n                tracking={true}\n                trackingOptions={{enableHighAccuracy: true}}\n                onChange={React.useCallback(function (e) {\n                    // Note the use of function instead of an arrow lambda\n                    // which does not have this\n                    const geoloc = e.target as OLGeoLoc;\n                    setPos(new Point(geoloc.getPosition()));\n                    setAccuracy(geoloc.getAccuracyGeometry());\n\n                    // Low-level access to the OpenLayers API\n                    this.context.map.getView().fit(geoloc.getAccuracyGeometry(), {\n                        duration: 250,\n                        maxZoom: 15\n                    });\n                }, [])}\n            />\n            <RLayerVector zIndex={10}>\n                <RStyle.RStyle>\n                    <RStyle.RIcon src={locationIcon} anchor={[0.5, 0.8]} />\n                    <RStyle.RStroke color={'#007bff'} width={3} />\n                </RStyle.RStyle>\n                <RFeature geometry={pos}></RFeature>\n                <RFeature geometry={accuracy}></RFeature>\n            </RLayerVector>\n        </RMap>\n    );\n}\n"}}]);