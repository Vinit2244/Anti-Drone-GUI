"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Image_1 = __importDefault(require("ol/layer/Image"));
var ImageStatic_1 = __importDefault(require("ol/source/ImageStatic"));
var RLayer_1 = __importDefault(require("./RLayer"));
/**
 * A layer that renders a static image
 */
var RLayerImage = /** @class */ (function (_super) {
    __extends(RLayerImage, _super);
    function RLayerImage(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.createSource();
        _this.ol = new Image_1.default({ source: _this.source });
        _this.eventSources = [_this.ol, _this.source];
        return _this;
    }
    RLayerImage.prototype.createSource = function () {
        var options = {
            url: this.props.url,
            projection: this.props.projection,
            imageExtent: this.props.extent,
            imageSize: this.props.size
        };
        this.source = new ImageStatic_1.default(options);
        this.eventSources = [this.ol, this.source];
    };
    RLayerImage.prototype.refresh = function (prevProps) {
        _super.prototype.refresh.call(this, prevProps);
        if (this.props.url && (prevProps === null || prevProps === void 0 ? void 0 : prevProps.url) !== this.props.url) {
            this.createSource();
            this.ol.setSource(this.source);
            this.eventSources = [this.ol, this.source];
            this.attachOldEventHandlers(this.source);
        }
    };
    return RLayerImage;
}(RLayer_1.default));
exports.default = RLayerImage;
//# sourceMappingURL=RLayerImage.js.map